/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Carmen Chui, Michael Gruninger - initial implementation
*******************************************************************************/

(cl-text http://colore.oor.net/financial/quantity.clif

(forall (a) (not (Nothing a))) (cl-comment 'Ax1')
(forall (a) (not (and (Thing a) (Datatype a)))) (cl-comment 'Ax2')
(forall (a) (if (Capital a) (Thing a)))
(cl-comment 'Ax3')
(forall (a) (if (Equity a) (Thing a)))
(cl-comment 'Ax4')
(forall (a) (if (AmountOfMoney a) (Thing a)))
(cl-comment 'Ax5')
(forall (a) (if (CalculatedPrice a) (Thing a)))
(cl-comment 'Ax6')
(forall (a) (if (Currency a) (Thing a)))
(cl-comment 'Ax7')
(forall (a) (if (ExchangeRate a) (Thing a)))
(cl-comment 'Ax8')
(forall (a) (if (InterestRate a) (Thing a)))
(cl-comment 'Ax9')
(forall (a) (if (MonetaryAmount a) (Thing a)))
(cl-comment 'Ax10')
(forall (a) (if (MonetaryMeasure a) (Thing a)))
(cl-comment 'Ax11')
(forall (a) (if (MonetaryPrice a) (Thing a)))
(cl-comment 'Ax12')
(forall (a) (if (MoneyAmount a) (Thing a)))
(cl-comment 'Ax13')
(forall (a) (if (PercentageMonetaryAmount a) (Thing a)))
(cl-comment 'Ax14')
(forall (a) (if (Price a) (Thing a)))
(cl-comment 'Ax15')
(forall (a) (if (UnitOfAccount a) (Thing a)))
(cl-comment 'Ax16')
(forall (a) (if (UnitOfAccountIdentifier a) (Thing a)))
(cl-comment 'Ax17')
(forall (a) (if (StructuredCollection a) (Thing a)))
(cl-comment 'Ax18')
(forall (a) (if (ExplicitDatePeriod a) (Thing a)))
(cl-comment 'Ax19')
(forall (a) (if (ExplicitRecurrenceInterval a) (Thing a)))
(cl-comment 'Ax20')
(forall (a) (if (RecurrenceInterval a) (Thing a)))
(cl-comment 'Ax21')
(forall (a) (if (Payment a) (Thing a)))
(cl-comment 'Ax22')
(forall (a) (if (Good a) (Thing a)))
(cl-comment 'Ax23')
(forall (a) (if (BaseUnit a) (Thing a)))
(cl-comment 'Ax24')
(forall (a) (if (DerivedUnit a) (Thing a)))
(cl-comment 'Ax25')
(forall (a) (if (MeasurementUnit a) (Thing a)))
(cl-comment 'Ax26')
(forall (a) (if (ParticularQuantity a) (Thing a)))
(cl-comment 'Ax27')
(forall (a) (if (Quantity a) (Thing a)))
(cl-comment 'Ax28')
(forall (a) (if (QuantityKind a) (Thing a)))
(cl-comment 'Ax29')
(forall (a) (if (QuantityValue a) (Thing a)))
(cl-comment 'Ax30')
(forall (a) (if (Rate a) (Thing a)))
(cl-comment 'Ax31')
(forall (a) (if (SystemOfUnits a) (Thing a)))
(cl-comment 'Ax32')
(forall (a) (if (UnitFactor a) (Thing a)))
(cl-comment 'Ax33')
(forall (a) (if (Reference a) (Thing a)))
(cl-comment 'Ax34')
(forall (a) (if (AnnualizedStandardDeviation a) (Thing a)))
(cl-comment 'Ax35')
(forall (a) (if (ArithmeticMean a) (Thing a)))
(cl-comment 'Ax36')
(forall (a) (if (Aspect a) (Thing a)))
(cl-comment 'Ax37')
(forall (a) (if (AverageAbsoluteDeviation a) (Thing a)))
(cl-comment 'Ax38')
(forall (a) (if (CalculationFormula a) (Thing a)))
(cl-comment 'Ax39')
(forall (a) (if (Difference a) (Thing a)))
(cl-comment 'Ax40')
(forall (a) (if (Dispersion a) (Thing a)))
(cl-comment 'Ax41')
(forall (a) (if (Expression a) (Thing a)))
(cl-comment 'Ax42')
(forall (a) (if (FinitePopulation a) (Thing a)))
(cl-comment 'Ax43')
(forall (a) (if (GeometricMean a) (Thing a)))
(cl-comment 'Ax44')
(forall (a) (if (Mean a) (Thing a)))
(cl-comment 'Ax45')
(forall (a) (if (Measure a) (Thing a)))
(cl-comment 'Ax46')
(forall (a) (if (Median a) (Thing a)))
(cl-comment 'Ax47')
(forall (a) (if (MedianAbsoluteDeviation a) (Thing a)))
(cl-comment 'Ax48')
(forall (a) (if (NumericIndex a) (Thing a)))
(cl-comment 'Ax49')
(forall (a) (if (Percentage a) (Thing a)))
(cl-comment 'Ax50')
(forall (a) (if (QualifiedMeasure a) (Thing a)))
(cl-comment 'Ax51')
(forall (a) (if (Ratio a) (Thing a)))
(cl-comment 'Ax52')
(forall (a) (if (RatioExpression a) (Thing a)))
(cl-comment 'Ax53')
(forall (a) (if (RatioValue a) (Thing a)))
(cl-comment 'Ax54')
(forall (a) (if (SamplingVariance a) (Thing a)))
(cl-comment 'Ax55')
(forall (a) (if (ScopedMeasure a) (Thing a)))
(cl-comment 'Ax56')
(forall (a) (if (StandardDeviation a) (Thing a)))
(cl-comment 'Ax57')
(forall (a) (if (StatisticalArea a) (Thing a)))
(cl-comment 'Ax58')
(forall (a) (if (StatisticalMeasure a) (Thing a)))
(cl-comment 'Ax59')
(forall (a) (if (Total a) (Thing a)))
(cl-comment 'Ax60')
(forall (a) (if (Variable a) (Thing a)))
(cl-comment 'Ax61')
(forall (a) (if (Variance a) (Thing a)))
(cl-comment 'Ax62')
(forall (a) (if (boolean a) (Datatype a))) (cl-comment 'Ax63')
(forall (a) (if (DATA a) (Datatype a))) (cl-comment 'Ax64')
(forall (a) (if (hexBinary a) (Datatype a))) (cl-comment 'Ax65')
(forall (a) (if (base64Binary a) (Datatype a)))
(cl-comment 'Ax66')
(forall (a) (if (date a) (Datatype a))) (cl-comment 'Ax67')
(forall (a) (if (time a) (Datatype a))) (cl-comment 'Ax68')
(forall (a) (if (gYearMonth a) (Datatype a)))
(cl-comment 'Ax69')
(forall (a) (if (gYear a) (Datatype a))) (cl-comment 'Ax70')
(forall (a) (if (gMonthDay a) (Datatype a))) (cl-comment 'Ax71')
(forall (a) (if (gDay a) (Datatype a))) (cl-comment 'Ax72')
(forall (a) (if (gMonth a) (Datatype a))) (cl-comment 'Ax73')
(forall (a) (if (duration a) (Datatype a))) (cl-comment 'Ax74')
(forall (a) (if (dateTime a) (Datatype a))) (cl-comment 'Ax75')
(forall (a) (if (dateTimeStamp a) (Datatype a)))
(cl-comment 'Ax76')
(forall (a) (if (anyURI a) (Datatype a))) (cl-comment 'Ax77')
(forall (a) (if (integer a) (Datatype a))) (cl-comment 'Ax78')
(forall (a) (if (negativeInteger a) (Datatype a)))
(cl-comment 'Ax79')
(forall (a) (if (nonNegativeInteger a) (Datatype a)))
(cl-comment 'Ax80')
(forall (a) (if (nonPositiveInteger a) (Datatype a)))
(cl-comment 'Ax81')
(forall (a) (if (positiveInteger a) (Datatype a)))
(cl-comment 'Ax82')
(forall (a) (if (decimal a) (Datatype a))) (cl-comment 'Ax83')
(forall (a) (if (double a) (Datatype a))) (cl-comment 'Ax84')
(forall (a) (if (float a) (Datatype a))) (cl-comment 'Ax85')
(forall (a) (if (long a) (Datatype a))) (cl-comment 'Ax86')
(forall (a) (if (int a) (Datatype a))) (cl-comment 'Ax87')
(forall (a) (if (short a) (Datatype a))) (cl-comment 'Ax88')
(forall (a) (if (byte a) (Datatype a))) (cl-comment 'Ax89')
(forall (a) (if (unsignedLongS a) (Datatype a)))
(cl-comment 'Ax90')
(forall (a) (if (unsignedInt a) (Datatype a)))
(cl-comment 'Ax91')
(forall (a) (if (unsignedShort a) (Datatype a)))
(cl-comment 'Ax92')
(forall (a) (if (unsignedByte a) (Datatype a)))
(cl-comment 'Ax93')
(forall (a) (if (string a) (Datatype a))) (cl-comment 'Ax94')
(forall (a) (if (NCName a) (Datatype a))) (cl-comment 'Ax95')
(forall (a) (if (QName a) (Datatype a))) (cl-comment 'Ax96')
(forall (a) (if (Name a) (Datatype a))) (cl-comment 'Ax97')
(forall (a) (if (NMTOKEN a) (Datatype a))) (cl-comment 'Ax98')
(forall (a) (if (NMTOKENS a) (Datatype a))) (cl-comment 'Ax99')
(forall (a) (if (token a) (Datatype a))) (cl-comment 'Ax100')
(forall (a) (if (language a) (Datatype a))) (cl-comment 'Ax101')
(forall (a) (if (normalizedString a) (Datatype a)))
(cl-comment 'Ax102')
(forall (a) (if (NOTATION a) (Datatype a))) (cl-comment 'Ax103')
(forall (a) (if (ENTITY a) (Datatype a))) (cl-comment 'Ax104')
(forall (a) (if (ENTITIES a) (Datatype a))) (cl-comment 'Ax105')
(forall (a) (if (ID a) (Datatype a))) (cl-comment 'Ax106')
(forall (a) (if (IDREF a) (Datatype a))) (cl-comment 'Ax107')
(forall (a) (if (IDREFS a) (Datatype a))) (cl-comment 'Ax108')
(forall (a) (if (real a) (Datatype a))) (cl-comment 'Ax109')
(forall (a) (if (rational a) (Datatype a))) (cl-comment 'Ax110')
(forall (a) (if (XMLLiteral a) (Datatype a)))
(cl-comment 'Ax111')
(forall (a) (if (Literal a) (Datatype a))) (cl-comment 'Ax112')
(if (hasAmount a
b) (topDataProperty a
b))
(cl-comment 'Ax113')
(if (hasNumericCode a
b) (topDataProperty a
b))
(cl-comment 'Ax114')
(if (hasRateValue a
b) (topDataProperty a
b))
(cl-comment 'Ax115')
(if (hasName a
b) (topDataProperty a
b))
(cl-comment 'Ax116')
(if (hasCollectionSize a
b) (topDataProperty a
b))
(cl-comment 'Ax117')
(if (hasNumericValue a
b) (topDataProperty a
b))
(cl-comment 'Ax118')
(if (hasMeasurementDateTime a
b) (topDataProperty a
b))
(cl-comment 'Ax119')
(if (hasMeasurementPeriodInMonths a
b) (topDataProperty a
b))
(cl-comment 'Ax120')
(if (isCalculatedViaMethodology a
b) (topDataProperty a
b))
(cl-comment 'Ax121')
(if (isEstimate a
b) (topDataProperty a
b))
(cl-comment 'Ax122')
(if (hasAmount a
b) (not (bottomDataProperty a
b)))
(cl-comment 'Ax123')
(if (hasNumericCode a
b) (not (bottomDataProperty a
b)))
(cl-comment 'Ax124')
(if (hasRateValue a
b) (not (bottomDataProperty a
b)))
(cl-comment 'Ax125')
(if (hasName a
b) (not (bottomDataProperty a
b)))
(cl-comment 'Ax126')
(if (hasCollectionSize a
b) (not (bottomDataProperty a
b)))
(cl-comment 'Ax127')
(if (hasNumericValue a
b) (not (bottomDataProperty a
b)))
(cl-comment 'Ax128')
(if (hasMeasurementDateTime a
b) (not (bottomDataProperty a
b)))
(cl-comment 'Ax129')
(if (hasMeasurementPeriodInMonths a
b) (not (bottomDataProperty a
b)))
(cl-comment 'Ax130')
(if (isCalculatedViaMethodology a
b) (not (bottomDataProperty a
b)))
(cl-comment 'Ax131')
(if (isEstimate a
b) (not (bottomDataProperty a
b)))
(cl-comment 'Ax132')
(if (takesForm a
b) (topObjectProperty a
b))
(cl-comment 'Ax133')
(if (hasBaseCurrency a
b) (topObjectProperty a
b))
(cl-comment 'Ax134')
(if (hasBaseMoneyUnit a
b) (topObjectProperty a
b))
(cl-comment 'Ax135')
(if (hasCurrency a
b) (topObjectProperty a
b))
(cl-comment 'Ax136')
(if (hasDealtCurrency a
b) (topObjectProperty a
b))
(cl-comment 'Ax137')
(if (hasMonetaryAmount a
b) (topObjectProperty a
b))
(cl-comment 'Ax138')
(if (hasNotionalAmount a
b) (topObjectProperty a
b))
(cl-comment 'Ax139')
(if (hasPrice a
b) (topObjectProperty a
b))
(cl-comment 'Ax140')
(if (identifies a
b) (topObjectProperty a
b))
(cl-comment 'Ax141')
(if (hasReportingPeriod a
b) (topObjectProperty a
b))
(cl-comment 'Ax142')
(if (hasCoverageArea a
b) (topObjectProperty a
b))
(cl-comment 'Ax143')
(if (hasPaymentAmount a
b) (topObjectProperty a
b))
(cl-comment 'Ax144')
(if (hasFactor a
b) (topObjectProperty a
b))
(cl-comment 'Ax145')
(if (hasMeasurementUnit a
b) (topObjectProperty a
b))
(cl-comment 'Ax146')
(if (hasQuantityKind a
b) (topObjectProperty a
b))
(cl-comment 'Ax147')
(if (hasQuantityValue a
b) (topObjectProperty a
b))
(cl-comment 'Ax148')
(if (isDerivedFrom a
b) (topObjectProperty a
b))
(cl-comment 'Ax149')
(if (specializes a
b) (topObjectProperty a
b))
(cl-comment 'Ax150')
(if (appliesTo a
b) (topObjectProperty a
b))
(cl-comment 'Ax151')
(if (defines a
b) (topObjectProperty a
b))
(cl-comment 'Ax152')
(if (denotes a
b) (topObjectProperty a
b))
(cl-comment 'Ax153')
(if (hasDefinition a
b) (topObjectProperty a
b))
(cl-comment 'Ax154')
(if (isCharacterizedBy a
b) (topObjectProperty a
b))
(cl-comment 'Ax155')
(if (evaluates a
b) (topObjectProperty a
b))
(cl-comment 'Ax156')
(if (forYear a
b) (topObjectProperty a
b))
(cl-comment 'Ax157')
(if (hasApplicableDatePeriod a
b) (topObjectProperty a
b))
(cl-comment 'Ax158')
(if (hasArgument a
b) (topObjectProperty a
b))
(cl-comment 'Ax159')
(if (hasBasePeriod a
b) (topObjectProperty a
b))
(cl-comment 'Ax160')
(if (hasFormula a
b) (topObjectProperty a
b))
(cl-comment 'Ax161')
(if (hasMinuend a
b) (topObjectProperty a
b))
(cl-comment 'Ax162')
(if (hasObservedValue a
b) (topObjectProperty a
b))
(cl-comment 'Ax163')
(if (hasPeriodicity a
b) (topObjectProperty a
b))
(cl-comment 'Ax164')
(if (hasReferencePeriod a
b) (topObjectProperty a
b))
(cl-comment 'Ax165')
(if (hasSubtrahend a
b) (topObjectProperty a
b))
(cl-comment 'Ax166')
(if (isMeasureOf a
b) (topObjectProperty a
b))
(cl-comment 'Ax167')
(if (takesForm a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax168')
(if (hasBaseCurrency a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax169')
(if (hasBaseMoneyUnit a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax170')
(if (hasCurrency a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax171')
(if (hasDealtCurrency a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax172')
(if (hasMonetaryAmount a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax173')
(if (hasNotionalAmount a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax174')
(if (hasPrice a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax175')
(if (identifies a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax176')
(if (hasReportingPeriod a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax177')
(if (hasCoverageArea a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax178')
(if (hasPaymentAmount a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax179')
(if (hasFactor a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax180')
(if (hasMeasurementUnit a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax181')
(if (hasQuantityKind a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax182')
(if (hasQuantityValue a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax183')
(if (isDerivedFrom a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax184')
(if (specializes a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax185')
(if (appliesTo a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax186')
(if (defines a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax187')
(if (denotes a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax188')
(if (hasDefinition a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax189')
(if (isCharacterizedBy a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax190')
(if (evaluates a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax191')
(if (forYear a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax192')
(if (hasApplicableDatePeriod a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax193')
(if (hasArgument a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax194')
(if (hasBasePeriod a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax195')
(if (hasFormula a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax196')
(if (hasMinuend a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax197')
(if (hasObservedValue a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax198')
(if (hasPeriodicity a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax199')
(if (hasReferencePeriod a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax200')
(if (hasSubtrahend a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax201')
(if (isMeasureOf a
b) (not (bottomObjectProperty a
b)))
(cl-comment 'Ax202')
(forall (a) (iff (AmountOfMoney a) (MoneyAmount a)))
(cl-comment 'Ax1_1')
(forall (a) (iff (ParticularQuantity a) (QuantityValue a)))
(cl-comment 'Ax2_2')
(forall (a) (iff (Rate a) (Ratio a)))
(cl-comment 'Ax3_3')
(forall (a) (if (Capital a) (forall (b) (if (takesForm a
b) (MonetaryAmount b)))))
(cl-comment 'Ax4_4')
(forall (a) (if (Equity a) (forall (b) (if (takesForm a
b) (MonetaryAmount b)))))
(cl-comment 'Ax5_5')
(forall (a) (if (AmountOfMoney a) (QuantityValue a)))
(cl-comment 'Ax6_6')
(forall (a) (if (AmountOfMoney a) (forall (b) (if (hasBaseMoneyUnit a
b) (Currency b)))))
(cl-comment 'Ax7_7')
(forall (a) (if (CalculatedPrice a) (MonetaryPrice a)))
(cl-comment 'Ax8_8')
(forall (a) (if (CalculatedPrice a) (and (exists (b) (and (CalculationFormula b)
(hasFormula a
b)))
(exists (b
c) (if (and (hasFormula a
b)
(hasFormula a
c)
(CalculationFormula b)) (= b c))))))
(cl-comment 'Ax9_9')
(forall (a) (if (ExchangeRate a) (RatioValue a)))
(cl-comment 'Ax10_10')
(forall (a) (if (ExchangeRate a) (forall (b) (if (hasQuantityKind a
b) (MonetaryMeasure b)))))
(cl-comment 'Ax11_11')
(forall (a) (if (ExchangeRate a) (and (exists (b) (and (Currency b)
(hasBaseCurrency a
b)))
(exists (b
c) (if (and (hasBaseCurrency a
b)
(hasBaseCurrency a
c)
(Currency b)) (= b c))))))
(cl-comment 'Ax12_12')
(forall (a) (if (ExchangeRate a) (and (exists (b) (and (Currency b)
(hasDealtCurrency a
b)))
(exists (b
c) (if (and (hasDealtCurrency a
b)
(hasDealtCurrency a
c)
(Currency b)) (= b c))))))
(cl-comment 'Ax13_13')
(forall (a) (if (ExchangeRate a) (and (exists (b) (and (decimal b)
(hasRateValue a
b)))
(exists (b
c) (if (and (hasRateValue a
b)
(hasRateValue a
c)
(decimal b)) (= b c))))))
(cl-comment 'Ax14_14')
(forall (a) (if (InterestRate a) (Percentage a)))
(cl-comment 'Ax15_15')
(forall (a) (if (InterestRate a) (forall (b) (if (hasQuantityKind a
b) (MonetaryMeasure b)))))
(cl-comment 'Ax16_16')
(forall (a) (if (InterestRate a) (and (exists (b) (and (decimal b)
(hasRateValue a
b)))
(exists (b
c) (if (and (hasRateValue a
b)
(hasRateValue a
c)
(decimal b)) (= b c))))))
(cl-comment 'Ax17_17')
(forall (a) (if (MonetaryAmount a) (QuantityValue a)))
(cl-comment 'Ax18_18')
(forall (a) (if (MonetaryAmount a) (and (exists (b) (and (Currency b)
(hasCurrency a
b)))
(exists (b
c) (if (and (hasCurrency a
b)
(hasCurrency a
c)
(Currency b)) (= b c))))))
(cl-comment 'Ax19_19')
(forall (a) (if (MonetaryAmount a) (and (exists (b) (and (decimal b)
(hasAmount a
b)))
(exists (b
c) (if (and (hasAmount a
b)
(hasAmount a
c)
(decimal b)) (= b c))))))
(cl-comment 'Ax20_20')
(forall (a) (if (MonetaryMeasure a) (Measure a)))
(cl-comment 'Ax21_21')
(forall (a) (if (MonetaryPrice a) (MonetaryAmount a)))
(cl-comment 'Ax22_22')
(forall (a) (if (MonetaryPrice a) (Price a)))
(cl-comment 'Ax23_23')
(forall (a) (if (PercentageMonetaryAmount a) (Percentage a)))
(cl-comment 'Ax24_24')
(forall (a) (if (Price a) (QuantityValue a)))
(cl-comment 'Ax25_25')
(forall (a) (if (Price a) (forall (b) (if (hasQuantityKind a
b) (MonetaryMeasure b)))))
(cl-comment 'Ax26_26')
(forall (a) (if (UnitOfAccount a) (MonetaryMeasure a)))
(cl-comment 'Ax27_27')
(forall (a) (if (UnitOfAccount a) (exists (b) (and (string b)
(hasName a
b)))))
(cl-comment 'Ax28_28')
(forall (a) (if (UnitOfAccount a) (and (exists (b) (and (string b)
(hasNumericCode a
b)))
(exists (b
c) (if (and (hasNumericCode a
b)
(hasNumericCode a
c)
(string b)) (= b c))))))
(cl-comment 'Ax29_29')
(forall (a) (if (UnitOfAccountIdentifier a) (exists (b) (and (identifies a
b)
(UnitOfAccount b)))))
(cl-comment 'Ax30_30')
(forall (a) (if (UnitOfAccountIdentifier a) (exists (b) (and (denotes a
b)
(UnitOfAccount b)))))
(cl-comment 'Ax31_31')
(forall (a) (if (Payment a) (forall (b) (if (hasPaymentAmount a
b) (MonetaryAmount b)))))
(cl-comment 'Ax32_32')
(forall (a) (if (BaseUnit a) (MeasurementUnit a)))
(cl-comment 'Ax33_33')
(forall (a) (if (DerivedUnit a) (MeasurementUnit a)))
(cl-comment 'Ax34_34')
(forall (a) (if (DerivedUnit a) (exists (b) (and (hasFactor a
b)
(UnitFactor b)))))
(cl-comment 'Ax35_35')
(forall (a) (if (DerivedUnit a) (exists (b) (and (isDerivedFrom a
b)
(BaseUnit b)))))
(cl-comment 'Ax36_36')
(forall (a) (if (MeasurementUnit a) (Quantity a)))
(cl-comment 'Ax37_37')
(forall (a) (if (MeasurementUnit a) (exists (b) (and (hasDefinition a
b)
(SystemOfUnits b)))))
(cl-comment 'Ax38_38')
(cl-comment 'forall (a) (if (MeasurementUnit a) (exists () (and))))')
(cl-comment 'Ax39_39')
(forall (a) (if (Quantity a) (Measure a)))
(cl-comment 'Ax40_40')
(forall (a) (if (Quantity a) (exists (b) (and (hasQuantityKind a
b)
(QuantityKind b)))))
(cl-comment 'Ax41_41')
(forall (a) (if (QuantityKind a) (exists (b) (and (hasMeasurementUnit a
b)
(MeasurementUnit b)))))
(cl-comment 'Ax42_42')
(forall (a) (if (QuantityValue a) (exists (b
c) (if (and (hasMeasurementUnit a
b)
(hasMeasurementUnit a
c)
(MeasurementUnit b)) (= b c)))))
(cl-comment 'Ax43_43')
(forall (a) (if (QuantityValue a) (and (exists (b) (and (decimal b)
(hasNumericValue a
b)))
(exists (b
c) (if (and (hasNumericValue a
b)
(hasNumericValue a
c)
(decimal b)) (= b c))))))
(cl-comment 'Ax44_44')
(forall (a) (if (Rate a) (Quantity a)))
(cl-comment 'Ax45_45')
(forall (a) (if (SystemOfUnits a) (exists (b) (and (defines a
b)
(MeasurementUnit b)))))
(cl-comment 'Ax46_46')
(forall (a) (if (UnitFactor a) (and (exists (b) (and (MeasurementUnit b)
(hasMeasurementUnit a
b)))
(exists (b
c) (if (and (hasMeasurementUnit a
b)
(hasMeasurementUnit a
c)
(MeasurementUnit b)) (= b c))))))
(cl-comment 'Ax47_47')
(forall (a) (if (AnnualizedStandardDeviation a) (StandardDeviation a)))
(cl-comment 'Ax48_48')
(forall (a) (if (AnnualizedStandardDeviation a) (and (exists (b) (and (ExplicitRecurrenceInterval b)
(hasReferencePeriod a
b)))
(exists (b
c) (if (and (hasReferencePeriod a
b)
(hasReferencePeriod a
c)
(ExplicitRecurrenceInterval b)) (= b c))))))
(cl-comment 'Ax49_49')
(forall (a) (if (ArithmeticMean a) (Mean a)))
(cl-comment 'Ax50_50')
(forall (a) (if (AverageAbsoluteDeviation a) (Dispersion a)))
(cl-comment 'Ax51_51')
(forall (a) (if (AverageAbsoluteDeviation a) (exists (b) (and (hasArgument a
b)
(or (Mean b)
(Median b))))))
(cl-comment 'Ax52_52')
(forall (a) (if (Difference a) (Expression a)))
(cl-comment 'Ax53_53')
(forall (a) (if (Difference a) (StatisticalMeasure a)))
(cl-comment 'Ax54_54')
(forall (a) (if (Difference a) (and (exists (b) (hasMinuend a
b))
(exists (b
c) (if (and (hasMinuend a
b)
(hasMinuend a
c)) (= b c))))))
(cl-comment 'Ax55_55')
(forall (a) (if (Difference a) (and (exists (b) (hasSubtrahend a
b))
(exists (b
c) (if (and (hasSubtrahend a
b)
(hasSubtrahend a
c)) (= b c))))))
(cl-comment 'Ax56_56')
(forall (a) (if (Dispersion a) (Expression a)))
(cl-comment 'Ax57_57')
(forall (a) (if (Dispersion a) (StatisticalMeasure a)))
(cl-comment 'Ax58_58')
(forall (a) (if (Dispersion a) (exists (b) (and (appliesTo a
b)
(FinitePopulation b)))))
(cl-comment 'Ax59_59')
(forall (a) (if (Dispersion a) (exists (b) (and (hasObservedValue a
b)
(StructuredCollection b)))))
(cl-comment 'Ax60_60')
(forall (a) (if (Dispersion a) (exists (b
c) (if (and (hasCollectionSize a
b)
(hasCollectionSize a
c)
(nonNegativeInteger b)) (= b c)))))
(cl-comment 'Ax61_61')
(forall (a) (if (GeometricMean a) (Mean a)))
(cl-comment 'Ax62_62')
(forall (a) (if (Mean a) (Expression a)))
(cl-comment 'Ax63_63')
(forall (a) (if (Mean a) (StatisticalMeasure a)))
(cl-comment 'Ax64_64')
(forall (a) (if (Mean a) (exists (b) (and (hasObservedValue a
b)
(StructuredCollection b)))))
(cl-comment 'Ax65_65')
(forall (a) (if (Measure a) (Reference a)))
(cl-comment 'Ax66_66')
(forall (a) (if (Median a) (Expression a)))
(cl-comment 'Ax67_67')
(forall (a) (if (Median a) (StatisticalMeasure a)))
(cl-comment 'Ax68_68')
(forall (a) (if (Median a) (exists (b) (and (hasObservedValue a
b)
(StructuredCollection b)))))
(cl-comment 'Ax69_69')
(forall (a) (if (MedianAbsoluteDeviation a) (Dispersion a)))
(cl-comment 'Ax70_70')
(forall (a) (if (MedianAbsoluteDeviation a) (exists (b) (and (hasArgument a
b)
(Median b)))))
(cl-comment 'Ax71_71')
(forall (a) (if (NumericIndex a) (Expression a)))
(cl-comment 'Ax72_72')
(forall (a) (if (NumericIndex a) (ScopedMeasure a)))
(cl-comment 'Ax73_73')
(forall (a) (if (NumericIndex a) (and (exists (b) (and (ExplicitDatePeriod b)
(hasReportingPeriod a
b)))
(exists (b
c) (if (and (hasReportingPeriod a
b)
(hasReportingPeriod a
c)
(ExplicitDatePeriod b)) (= b c))))))
(cl-comment 'Ax74_74')
(forall (a) (if (NumericIndex a) (and (exists (b) (and (ExplicitDatePeriod b)
(hasBasePeriod a
b)))
(exists (b
c) (if (and (hasBasePeriod a
b)
(hasBasePeriod a
c)
(ExplicitDatePeriod b)) (= b c))))))
(cl-comment 'Ax75_75')
(forall (a) (if (Percentage a) (RatioValue a)))
(cl-comment 'Ax76_76')
(forall (a) (if (QualifiedMeasure a) (StatisticalMeasure a)))
(cl-comment 'Ax77_77')
(cl-comment '(forall (a) (if (QualifiedMeasure a) (exists () (and))))')
(cl-comment 'Ax78_78')
(forall (a) (if (Ratio a) (Expression a)))
(cl-comment 'Ax79_79')
(forall (a) (if (Ratio a) (StatisticalMeasure a)))
(cl-comment 'Ax80_80')
(forall (a) (if (RatioExpression a) (Ratio a)))
(cl-comment 'Ax81_81')
(forall (a) (if (RatioExpression a) (exists (b) (and (evaluates a
b)
(RatioValue b)))))
(cl-comment 'Ax82_82')
(forall (a) (if (RatioExpression a) (and (exists (b
c) (and (not (= b c))
(Expression b)
(Expression c)
(hasArgument a
b)
(hasArgument a
c)))
(exists (b
c
d) (if (and (hasArgument a
b)
(hasArgument a
c)
(hasArgument a
d)
(Expression b)
(Expression c)) (or (= b c)
(= b d)
(= c d)))))))
(cl-comment 'Ax83_83')
(forall (a) (if (RatioValue a) (QuantityValue a)))
(cl-comment 'Ax84_84')
(forall (a) (if (RatioValue a) (and (exists (b
c) (and (not (= b c))
(Variable b)
(Variable c)
(hasArgument a
b)
(hasArgument a
c)))
(exists (b
c
d) (if (and (hasArgument a
b)
(hasArgument a
c)
(hasArgument a
d)
(Variable b)
(Variable c)) (or (= b c)
(= b d)
(= c d)))))))
(cl-comment 'Ax85_85')
(forall (a) (if (SamplingVariance a) (Variance a)))
(cl-comment 'Ax86_86')
(forall (a) (if (ScopedMeasure a) (QualifiedMeasure a)))
(cl-comment 'Ax87_87')
(forall (a) (if (ScopedMeasure a) (forall (b) (if (hasPeriodicity a
b) (RecurrenceInterval b)))))
(cl-comment 'Ax88_88')
(cl-comment '(forall (a) (if (ScopedMeasure a) (exists () (and))))')
(cl-comment 'Ax89_89')
(cl-comment '(forall (a) (if (ScopedMeasure a) (exists () (and))))')
(cl-comment 'Ax90_90')
(forall (a) (if (StandardDeviation a) (Dispersion a)))
(cl-comment 'Ax91_91')
(forall (a) (if (StandardDeviation a) (exists (b) (and (hasArgument a
b)
(or (Mean b)
(Variance b))))))
(cl-comment 'Ax92_92')
(forall (a) (if (StatisticalMeasure a) (Measure a)))
(cl-comment 'Ax93_93')
(cl-comment '(forall (a) (if (StatisticalMeasure a) (exists () (and))))')
(cl-comment 'Ax94_94')
(forall (a) (if (StatisticalMeasure a) (and (exists (b) (and (boolean b)
(isEstimate a
b)))
(exists (b
c) (if (and (isEstimate a
b)
(isEstimate a
c)
(boolean b)) (= b c))))))
(cl-comment 'Ax95_95')
(forall (a) (if (Total a) (Expression a)))
(cl-comment 'Ax96_96')
(forall (a) (if (Total a) (StatisticalMeasure a)))
(cl-comment 'Ax97_97')
(forall (a) (if (Variance a) (Dispersion a)))
(cl-comment 'Ax98_98')
(forall (a) (if (Variance a) (exists (b) (and (hasArgument a
b)
(Mean b)))))
(cl-comment 'Ax99_99')
(forall (a) (not (and (AmountOfMoney a)
(Good a))))
(cl-comment 'Ax100_100')
(UnitOfAccount ADBUnitofAccount)
(cl-comment 'Ax101_101')
(UnitOfAccount BondMarketsUnitEuropeanCompositeUnit_EURCO)
(cl-comment 'Ax102_102')
(UnitOfAccount BondMarketsUnitEuropeanMonetaryUnit_EMU-6)
(cl-comment 'Ax103_103')
(UnitOfAccount BondMarketsUnitEuropeanUnitofAccount17_EUA-17)
(cl-comment 'Ax104_104')
(UnitOfAccount BondMarketsUnitEuropeanUnitofAccount9_EUA-9)
(cl-comment 'Ax105_105')
(UnitOfAccount SDR_SpecialDrawingRight)
(cl-comment 'Ax106_106')
(forall (a) (exists (b) (if (hasBaseMoneyUnit a
b) (AmountOfMoney a))))
(cl-comment 'Ax107_107')
(forall (a) (exists (b) (if (forYear a
b) (StatisticalMeasure a))))
(cl-comment 'Ax108_108')
(forall (a) (exists (b) (if (hasApplicableDatePeriod a
b) (StatisticalMeasure a))))
(cl-comment 'Ax109_109')
(forall (a) (exists (b) (if (hasMinuend a
b) (Difference a))))
(cl-comment 'Ax110_110')
(forall (a) (exists (b) (if (hasSubtrahend a
b) (Difference a))))
(cl-comment 'Ax111_111')
(forall (a) (exists (b) (if (isMeasureOf a
b) (Measure a))))
(cl-comment 'Ax112_112')
(forall (b) (exists (a) (if (hasMonetaryAmount a
b) (MonetaryAmount b))))
(cl-comment 'Ax113_113')
(forall (b) (exists (a) (if (hasNotionalAmount a
b) (MonetaryAmount b))))
(cl-comment 'Ax114_114')
(forall (b) (exists (a) (if (hasPrice a
b) (Price b))))
(cl-comment 'Ax115_115')
(forall (b) (exists (a) (if (hasPaymentAmount a
b) (MonetaryAmount b))))
(cl-comment 'Ax116_116')
(forall (b) (exists (a) (if (hasMeasurementUnit a
b) (MeasurementUnit b))))
(cl-comment 'Ax117_117')
(forall (b) (exists (a) (if (hasQuantityValue a
b) (QuantityValue b))))
(cl-comment 'Ax118_118')
(forall (a) (exists (b) (if (hasMeasurementDateTime a
b) (Measure hasMeasurementDateTime))))
(cl-comment 'Ax119_119')
(forall (a) (exists (b) (if (hasMeasurementPeriodInMonths a
b) (Measure hasMeasurementPeriodInMonths))))
(cl-comment 'Ax120_120')
(forall (a) (exists (b) (if (isCalculatedViaMethodology a
b) (StatisticalMeasure isCalculatedViaMethodology))))
(cl-comment 'Ax121_121')
(forall (a) (exists (b) (if (isEstimate a
b) (StatisticalMeasure isEstimate))))
(cl-comment 'Ax122_122')


)