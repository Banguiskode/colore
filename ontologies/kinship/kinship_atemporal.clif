/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Carmen Chui, Janette Wong, Michael Gruninger - initial implementation
*******************************************************************************/

(cl-text http://colore.oor.net/relatedparties/kinship_atemporal.clif

(cl-comment '=============================')
(cl-comment 'Parent (Father, Mother)')
(cl-comment '=============================')

(cl-comment 'A parent is a person.')
(forall (x)
	(if (parent x)
		(person x)))

(cl-comment 'A parent is a person who has a child.')
(forall (x)
	(iff (parent x)
		(exists (c)
			(and (person c)(hasChild x c)(not (= x c))))))

(cl-comment 'A parent is not a child of themselves.')
(forall (x)
	(if (parent x)
		(not (hasChild x x))))

(cl-comment 'The hasChild(x,y) relation between two different people.')
(forall (x y)
	(if (hasChild x y)
		(and (person x)(person y)(not (= x y)))))

(cl-comment 'The hasChild(x,y) relation is not symmetric.')
(forall (x y)
	(if (hasChild x y)
		(not (hasChild y x))))
		
(cl-comment 'A child cannot be a child of themselves.')
(forall (x)
	(not (hasChild x x)))
	
(cl-comment 'hasParent(x,y) is the inverse of hasChild(y,x).')
(forall (x y)
	(iff (hasParent x y)
		(hasChild y x)))

(cl-comment 'A person cannot be a parent of themselves.')
(forall (x)
	(not (hasParent x x)))

(cl-comment 'The hasParent(x,y) relation is not symmetric.')
(forall (x y)
	(if (hasParent x y)
		(not (hasParent y x))))

(cl-comment 'A person has a parent who is a person.')
(cl-comment '(For every person, there is another person who is their parent.)')
(cl-comment '(forall (x) (if (person x) (exists (y) (and (person y)(hasParent x y)(not (= x y)))))) ')

(cl-comment 'A single parent is a person who is a parent of a child and not in a relationship (does not have a spouse).')
(cl-comment 'note: might need to revise since models generated can still have singleparent(x) if x is not a spouse with y but has children with y -- should we make the definition stronger?')
(cl-comment 'commented out for now.')
(cl-comment '(forall (x)(iff (singleParent x) (exists (y z) (and (hasChild x y) (not (hasSpouse x z))))))')

(cl-comment '=============================')
(cl-comment 'Spouse (Husband, Wife)')
(cl-comment '=============================')

(cl-comment 'A spouse is a person.')
(cl-comment '(forall (x) (if (spouse x) (person x)))')

(cl-comment 'The hasSpouse(x,y) relation is disjoint with hasChild(x,y).')
(forall (x y)
	(if (hasSpouse x y)
		(not (hasChild x y))))

(cl-comment 'The hasSpouse(x,y) relation is between two different people.')
(forall (x y)
	(if (hasSpouse x y)
		(and (person x)(person y)(not (= x y)))))

(cl-comment 'A person has exactly one spouse.')
(forall (x y z)
	(if (and (hasSpouse x y)(hasSpouse x z))
		(= y z)))

(cl-comment 'The hasSpouse(x,y) relation is symmetric.')
(forall (x y)
	(if (hasSpouse x y)
		(hasSpouse y x)))

(cl-comment 'A person cannot be a spouse of themselves.')
(forall (x)
	(not (hasSpouse x x)))

(cl-comment '=============================')
(cl-comment 'Child (Son, Daughter)')
(cl-comment '=============================')

(cl-comment 'A child is a person.')
(cl-comment 'NOTE: this causes everyone to be a child in the models')
(forall (x)
	(if (child x)
		(person x)))

(cl-comment 'A child is a person who has at least one parent.')
(forall (x)
	(iff (child x)
		(exists (y)
			(and (person x)(hasChild y x)(not (= x y))))))

(cl-comment 'A child is not the parent of themselves.')
(forall (x)
	(if (child x)
		(not (hasChild x x))))

(cl-comment '=============================')
(cl-comment 'Sibling (Brother, Sister)')
(cl-comment '=============================')

(cl-comment 'A sibling is a person who has the same parents of another person.')
(forall (x)
	(iff (sibling x)
		(exists (y z)
			(and (person x)(hasChild z y)(hasChild z x)
				(not (= x y))(not (= x z))(not (= y z))))))

(cl-comment 'For children who have the same parent, they are siblings.')
(forall (x y)
	(iff (hasSibling x y)
		(exists (z)
			(and (hasChild z x)(hasChild z y)(not (= x y))))))

(cl-comment 'If a person has a sibling, they are also a sibling of that person.')
(forall (x y)
	(if (hasSibling x y)
		(hasSibling y x)))

(cl-comment 'A person is not a sibling of themselves.')
(forall (x)
	(not (hasSibling x x)))

(cl-comment '=============================')
(cl-comment 'Grandparent')
(cl-comment '=============================')

(cl-comment 'A grandparent is a person who is the parent of a parent.')
(forall (x)
	(iff (grandparent x)
		(exists (y z)
			(and (hasChild x y)(hasChild y z)
				(not (= x y))(not (= y z))(not (= x z))))))

(cl-comment 'A person has a grandparent if their parent has a parent.')
(forall (x z)
	(iff (hasGrandparent z x)
		(exists (y)
			(and (hasChild x y)(hasChild y z)
				(not (= x y))(not (= y z))(not (= x z))))))

(cl-comment 'A person cannot be a grandparent of themselves.')
(forall (x)
	(not (hasGrandparent x x)))

(cl-comment 'The hasGrandparent(x,y) relation is not transitive.')
(forall (x y z)
	(if (and (hasGrandparent x y)(hasGrandparent y z))
		(not (hasGrandparent x z))))

(cl-comment 'The hasGrandparent(x,y) relation is not symmetric.')
(forall (x y)
	(if (hasGrandparent x y)
		(not (hasGrandparent y x))))

(cl-comment '=============================')
(cl-comment 'Grandchild (Grandson, Granddaughter)')
(cl-comment '=============================')

(cl-comment 'The child of a child is a grandchild.')
(forall (x)
	(iff (grandchild x)
		(exists (y z)
			(and (hasChild z y)(hasChild y x)
				(not (= x y))(not (= y z))(not (= x z))))))

(cl-comment 'A person has a grandchild if their child has a child.')
(forall (x z)
	(iff (hasGrandchild x z)
		(exists (y)
			(and (hasChild x y)(hasChild y z)
				(not (= x y))(not (= y z))(not (= x z))))))

(cl-comment 'A person cannot be a grandchild of themselves.')
(forall (x)
	(not (hasGrandchild x x)))

(cl-comment 'The hasGrandchild(x,y) relation is not transitive.')
(forall (x y z)
	(if (and (hasGrandchild x y)(hasGrandchild y z))
		(not (hasGrandchild x z))))

(cl-comment 'The hasGrandchild(x,y) relation is not symmetric.')
(forall (x y)
	(if (hasGrandchild x y)
		(not (hasGrandchild y x))))

(cl-comment '=============================')
(cl-comment 'Great-Grandparent (Great-grandfather, Great-Grandmother)')
(cl-comment '=============================')

(cl-comment 'A great-grandparent is a parent of a parent of a parent.')
(forall (x)
	(iff (greatgrandparent x)
		(exists (w y z)
			(and (hasChild x w)(hasChild w y)(hasChild y z)
				(not (= w x))(not (= w y))(not (= w z))
				(not (= x y))(not (= y z))(not (= x z))))))

(cl-comment 'A person has a great-grandparent if they have a parent who has a parent who has a parent.')
(forall (z w)
	(iff (hasGreatGrandparent z w)
		(exists (x y)
			(and (hasChild w x)(hasChild x y)(hasChild y z)
				(not (= w x))(not (= w y))(not (= w z))
				(not (= x y))(not (= y z))(not (= x z))))))

(cl-comment 'A person cannot be a grandparent of themselves.')
(forall (x)
	(not (hasGreatGrandparent x x)))

(cl-comment 'The hasGreatGrandparent(x,y) relation is not transitive.')
(forall (x y z)
	(if (and (hasGreatGrandparent x y)(hasGreatGrandparent y z))
		(not (hasGreatGrandparent x z))))
		
(cl-comment 'The hasGreatGrandparent(x,y) relation is not symmetric.')
(forall (x y)
	(if (hasGreatGrandparent x y)
		(not (hasGreatGrandparent y x))))

(cl-comment '=============================')
(cl-comment 'Cousin')
(cl-comment '=============================')

(cl-comment 'The child of the sibling of a persons parent is their cousin.')
(forall (x)
	(iff (cousin x)
		(exists (k w z y)
			(and (hasChild k z)(hasChild k w)(hasChild z x)(hasChild w y)
				(not (= k z))(not (= k w))(not (= k x))(not (= k y))
				(not (= z w))(not (= z x))(not (= z y))
				(not (= w x))(not (= w y))(not (= x y))))))

(cl-comment 'A person has a cousin if their parents sibling has a child.')
(forall (x y)
	(iff (hasCousin x y)
		(exists (k w z)
			(and (hasChild k z)(hasChild k w)(hasChild z x)(hasChild w y)
				(not (= k z))(not (= k w))(not (= k x))(not (= k y))
				(not (= z w))(not (= z x))(not (= z y))
				(not (= w x))(not (= w y))(not (= x y))))))

(cl-comment 'A person cannot be a cousin of themselves.')
(forall (x)
	(not (hasCousin x x)))
	
(cl-comment 'The hasCousin(x,y) relation is symmetric.')
(forall (x y)
	(if (hasCousin x y)
		(hasCousin y x)))

(cl-comment 'A person has a cousin if the sibling of their parent has a child.')
(cl-comment '(all x all y all z ((hasPibling(x,y) & hasChild(y,z)) -> hasCousin(x,z))).')

(cl-comment '=============================')
(cl-comment 'Pibling (Aunt/Uncle)')
(cl-comment '=============================')

(cl-comment 'A sibling of a parent is a persons pibling (aunt or uncle).')
(forall (x)
	(iff (pibling x)
		(exists (y z w)
			(and (hasSibling x y)(hasChild y z)))))
			
(cl-comment 'A person has a pibling (aunt/uncle) if their parent has a sibling.')
(forall (x z)
	(iff (hasPibling x z)
		(exists (y)
			(and (hasParent x y)(hasSibling y z)))))

(cl-comment 'A person cannot be a pibling of themselves.')
(forall (x)
	(not (hasPibling x x)))

(cl-comment 'The hasPibling(x,y) relation is not transitive.')
(forall (x y z)
	(if (and (hasPibling x y)(hasPibling y z))
		(not (hasPibling x z))))

(cl-comment 'The hasPibling(x,y) relation is not symmetric.')
(forall (x y)
	(if (hasPibling x y)
		(not (hasPibling y x))))

(cl-comment '=============================')
(cl-comment 'Great-Pibling (Great-Aunt/Great-Uncle)')
(cl-comment '=============================')

(cl-comment 'A sibling of someones grandparent is their great-pibling (great-aunt or great-uncle).')
(forall (x)
	(iff (greatpibling x)
		(exists (w y z)
			(and (hasChild w y)(hasChild y z)(hasSibling w x)))))

(cl-comment 'A person has a great-pibling (great-aunt or great-uncle) if their grandparent has a sibling.')
(forall (x w)
	(iff (hasGreatPibling x w)
		(exists (z)
			(and (hasGrandparent x z)(hasSibling z w)))))

(cl-comment 'A person cannot be a great pibling of themselves.')
(forall (x)
	(not (hasGreatPibling x x)))

(cl-comment 'The hasGreatPibling(x,y) relation is not transitive.')
(forall (x y z)
	(if (and (hasGreatPibling x y)(hasGreatPibling y z))
		(not (hasGreatPibling x z))))

(cl-comment 'The hasPibling(x,y) relation is not symmetric.')
(forall (x y)
	(if (hasGreatPibling x y)
		(not (hasGreatPibling y x))))

(cl-comment '=============================')
(cl-comment 'Nibling (Nephew, Niece)')
(cl-comment '=============================')

(cl-comment 'A nibling is the child of someones sibling. Nibling is the gender-neutral term in place of niece or nephew.')
(forall (x)
	(iff (nibling x)
		(exists (y z)
			(and (hasChild y x)(hasSibling y z)))))

(cl-comment 'The child of one persons sibling is their nibling.')
(forall (x z)
	(iff (hasNibling x z)
		(exists (y)
			(and (hasSibling x y)(hasChild y z)))))

(cl-comment 'A person cannot be a nibling of themselves.')
(forall (x)
	(not (hasNibling x x)))

(cl-comment 'The hasNibling(x,y) relation is not transitive.')
(forall (x y z)
	(if (and (hasNibling x y)(hasNibling y z))
		(not (hasNibling x z))))

(cl-comment 'The hasNibling(x,y) relation is not symmetric.')
(forall (x y)
	(if (hasNibling x y)
		(not (hasNibling y x))))

(cl-comment 'The hasNibling(x,y) relation is the inverse of hasPibling(y,x).')
(forall (x y)
	(iff (hasNibling x y)
		(hasPibling y x)))

(cl-comment '=============================')
(cl-comment 'Parent-in-Law (Father-in-law, Mother-in-law)')
(cl-comment '=============================')

(cl-comment 'The parent of a persons spouse is their parent-in-law.')
(forall (x)
	(iff (parentinlaw x)
		(exists (y z)
			(and (hasSpouse y z)(hasParent z x)(not (= y z))))))

(cl-comment 'A person has a parent-in-law if their spouse has a parent.')
(forall (x z)
	(iff (hasParentInLaw x z)
		(exists (y)
			(and (hasSpouse x y)(hasParent y z)(not (= x z))(not (hasParent x z))))))

(cl-comment 'A person cannot be a parent-in-law of themselves.')
(forall (x)
	(not (hasParentInLaw x x)))
	
(cl-comment 'The hasParentInLaw(x,y) relation is not transitive.')
(forall (x y z)
	(if (and (hasParentInLaw x y)(hasParentInLaw y z))
		(not (hasParentInLaw x z))))

(cl-comment 'The hasParentInLaw(x,y) relation is not symmetric.')
(forall (x y)
	(if (hasParentInLaw x y)
		(not (hasParentInLaw y x))))
		
(cl-comment 'The hasParentInLaw(x,y) relation is the inverse of hasChildInLaw(y,x).')
(cl-comment '(forall (x y)(iff (hasParentInLaw x y)(hasChildInLaw y x)))')

(cl-comment '=============================')
(cl-comment 'Sibling-in-Law (Brother-in-law, Sister-in-law)')
(cl-comment '=============================')

(cl-comment 'The sibling of a persons spouse is their sibling-in-law.')
(forall (x)
	(iff (siblinginlaw x)
		(exists (y z)
			(and (hasSpouse y z)(hasSibling z x)))))

(cl-comment 'A person has a sibling-in-law if their spouse has a sibling.')
(forall (x z)
	(iff (hasSiblingInLaw x z)
		(exists (y)
			(and (hasSpouse x y)(hasSibling y z)))))

(cl-comment 'A person cannot be a sibling-in-law of themselves.')
(forall (x)
	(not (hasSiblingInLaw x x)))

(cl-comment 'The hasSiblingInLaw(x,y) relation is not transitive.')
(cl-comment 'check if this is true? i think it might be transitive')
(forall (x y z)
	(if (and (hasSiblingInLaw x y)(hasSiblingInLaw y z))
		(not (hasSiblingInLaw x z))))

(cl-comment 'The hasSiblingInLaw(x,y) relation is symmetric.')
(forall (x y)
	(if (hasSiblingInLaw x y)
		(not (hasSiblingInLaw y x))))

(cl-comment '=============================')
(cl-comment 'Half-Sibling (Half-brother, half-sister)')
(cl-comment '=============================')

(cl-comment 'A half-sibling is someone who has a parent who is not the biological parent of their sibling.')
(forall (x)
	(iff (halfsibling x)
		(exists (w y z)
			(and (hasChild w x)(hasChild y z)
				(not (hasChild w z))(not (hasChild y x))(hasSpouse w y)
				(not (= x z))(not (= w z))(not (= w y))(not (= w x))(not (= x y))))))
					
(cl-comment 'possibly too strong - commented out for now - we dont necessarily need to know both parents of the children')
(cl-comment '(all x (halfsibling(x) <-> (exists z exists y exists k exists l (hasChild(z,x) & hasChild(y,x) & -hasSpouse(y,z) & hasChild(k,w) & hasChild(l,w) & -hasSpouse(k,l) & hasSpouse(y,k) & (z!=k) & (z!=l) & (y!=k) & (y!=l) & (x!=w))))).')

(cl-comment 'A person has a half-sibling if they have a sibling born to one parent, but not both.')
(forall (x z)
	(iff (hasHalfSibling x z)
		(exists (y w)
			(and (hasParent x y)(hasParent w z)(hasSpouse y z)
				(not (hasParent x z))(not (hasParent w y))))))

(cl-comment 'A person cannot be a half-sibling of themselves.')
(forall (x)
	(not (hasHalfSibling x x)))

(cl-comment 'The hasHalfSibling(x,y) relation is not transitive.')
(forall (x y z)
	(if (and (hasHalfSibling x y)(hasHalfSibling y z))
		(not (hasHalfSibling x z))))
		
(cl-comment 'The hasHalfSibling(x,y) relation is symmetric.')
(forall (x y)
	(if (hasHalfSibling x y)
		(hasHalfSibling y x)))

(cl-comment '=============================')
(cl-comment 'Step-child (gender-neutral)')
(cl-comment '=============================')

(cl-comment 'A step-child is a child born to a person zs spouse, but is not the child of z.')
(forall (x)
	(iff (stepchild x)
		(exists (y z)
			(and (hasParent x y)(hasSpouse y z)(not (hasParent x z))))))

(cl-comment 'A person has a step-child if the child is born to their spouse, but not their own.')
(forall (x z)
	(iff (hasStepChild x z)
		(exists (y w)
			(and (hasParent x y)(not (hasParent x z))(hasSpouse y z)(not (= x z))))))

(cl-comment 'A person cannot be a step-child of themselves.')
(forall (x)
	(not (hasStepChild x x)))
	
(cl-comment 'The hasHalfSibling(x,y) relation is not transitive.')
(forall (x y z)
	(if (and (hasStepChild x y)(hasStepChild y z))
		(not (hasStepChild x z))))

(cl-comment 'The hasStepChild(x,y) relation is not symmetric.')
(forall (x y)
	(if (hasStepChild x y)
		(not (hasStepChild y x))))

(cl-comment 'The hasStepParent(x,y) relation is the inverse of hasStepChild(y,x).')
(forall (x y)
	(iff (hasStepParent x y)
		(hasStepChild y x)))




(cl-comment '=============================')
(cl-comment 'Ancestor - partial ordering')
(cl-comment 'ancestorOf(x,y): "x is ancestor of y"')
(cl-comment '=============================')

(cl-comment 'A-01')
(cl-comment 'The ancestorOf(x,y) relation is not reflexive.')
(forall (x)
	(not (ancestorOf x x)))

(cl-comment 'A-02')
(cl-comment 'The ancestorOf(x,y) relation is asymmetric.')
(forall (x y)
	(if (ancestorOf x y)
		(not (ancesorOf y x))))

(cl-comment 'A-03')
(cl-comment 'The ancestorOf(x,y) relation is transitive.')
(forall (x y z)
	(if (and (ancestorOf x y)(ancestor y z))
		(ancestorOf x z)))

(cl-comment '=============================')
(cl-comment 'Ancestor - arithmetic axioms')
(cl-comment 'see Michaels PDF on Dropbox')
(cl-comment '=============================')

(cl-comment 'A-04')
(cl-comment 'If someone is descended from an ancestor, then they are also descended from the parent of the ancestor.')
(forall (x y z)
	(if (and (hasChild y z)(ancestorOf x z)(not (= x y)))
		(ancestorOf x y)))

(cl-comment 'A-05')
(cl-comment 'If x is an ancestor of y, then there is someone who is descended from x who has a parent y.')
(forall (x y)
	(if (ancestorOf x y)
		(exists (z)
			(and (hasChild y z)(ancestorOf x z)))))

(cl-comment 'A-06')
(cl-comment 'If someone has a child, the parent is the ancestor of the child and there does not exist a person inbetween them.')
(forall (x y)
	(iff (hasChild x y)
		(and (ancestorOf x y)
			(not (exists (z)
					(and (ancestorOf x z)(ancestorOf z y)))))))

(cl-comment '=============================')
(cl-comment 'Other Ancestor Constraints')
(cl-comment '=============================')

(cl-comment 'A-07')
(cl-comment 'If someone is the child of two people, they must not be descended from a common ancestor.')
(cl-comment 'hasChild(y,x) <-> childOf(x,y) -- axiom from Michael in a previous email thread (weakened)')
(forall (x y z)
	(if (and (hasChild y x)(hasChild z x)(not (= y z)))
		(not
			(exists (u)
				(and (ancestorOf u y)(ancestorOf u z))))))

(cl-comment 'A-08')
(cl-comment 'Prevent ancestors from being spouses.')
(forall (x y z)
	(if (and (hasSpouse x y)(ancestorOf z x))
		(not (= z y))))

(cl-comment 'A-09')
(cl-comment 'Prevent ancestors from being related (up to third cousins). Eliminates the British Royal Family.')
(forall (x y z)
	(if (and (hasSpouse x y)(ancestorOf z x))
		(not (ancestorOf z y))))

(cl-comment '=============================')
(cl-comment 'Nontrivial Models Test')
(cl-comment '=============================')

(exists (x y z)
	(and (hasChild x y)(hasChild x z)(not (= y z))))

(exists (x y)
	(hasSpouse x y))
	

)