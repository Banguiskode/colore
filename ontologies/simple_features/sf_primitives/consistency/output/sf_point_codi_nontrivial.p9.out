============================== Prover9 ===============================
Prover9 (32) version Oct-2007, Oct 2007.
Process 12764 was started by shirly on DESKTOP-OG7RO9F,
Thu Nov  1 08:59:57 2018
The command was "/cygdrive/d/Shirly/Reasoning/prover9-bin/prover9 -t1000 -f D:\colore-testbed\ontologies\multidim_space_dim\conversions\dim_prime_linear_unbounded.p9 D:\colore-testbed\ontologies\multidim_space_cont\conversions\cont_basic.p9 D:\colore-testbed\ontologies\multidim_space_codi\definitions\conversions\point.p9 D:\colore-testbed\ontologies\simple_features\sf_primitives\consistency\conversions\sf_point_codi_nontrivial.p9 D:\colore-testbed\ontologies\multidim_space_dim\conversions\dim_prime_linear.p9 D:\colore-testbed\ontologies\multidim_space_dim\definitions\conversions\min_max_dim.p9 D:\colore-testbed\ontologies\simple_features\sf_primitives\conversions\sf_point_codi.p9 D:\colore-testbed\ontologies\multidim_space_codi\conversions\codi_basic.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file D:\colore-testbed\ontologies\multidim_space_dim\conversions\dim_prime_linear_unbounded.p9


formulas(sos).
(all x12 all x11 (leq(x12,x11) -> s(x12))).
(all x22 all x21 (leq(x22,x21) -> s(x21))).
(all x31 (zex(x31) -> s(x31))).
(all x41 (s(x41) -> leq(x41,x41))).
(all x52 all x51 all x53 (leq(x52,x51) & leq(x51,x53) -> leq(x52,x53))).
(all x62 all x61 (zex(x62) & zex(x61) -> x62 = x61)).
(all x72 all x71 (zex(x72) & s(x71) -> leq(x72,x71))).
end_of_list.

% Reading from file D:\colore-testbed\ontologies\multidim_space_cont\conversions\cont_basic.p9


formulas(sos).
(all x11 (s(x11) & -zex(x11) <-> cont(x11,x11))).
(all x22 all x21 (cont(x22,x21) & cont(x21,x22) -> x22 = x21)).
(all x32 all x31 all x33 (cont(x32,x31) & cont(x31,x33) -> cont(x32,x33))).
(all x42 all x41 (zex(x42) -> s(x42) & -cont(x41,x42) & -cont(x42,x41))).
(all x52 all x51 (zex(x52) & zex(x51) -> x52 = x51)).
end_of_list.

% Reading from file D:\colore-testbed\ontologies\multidim_space_codi\definitions\conversions\point.p9


formulas(sos).
(all x12 (point(x12) <-> s(x12) & mindim(x12) & (all x11 (cont(x11,x12) -> x11 = x12)))).
end_of_list.

% Reading from file D:\colore-testbed\ontologies\simple_features\sf_primitives\consistency\conversions\sf_point_codi_nontrivial.p9


formulas(sos).
(exists x2 sf_point(x2)).
(exists x3 -sf_point(x3)).
(exists x4 point(x4)).
(exists x5 -point(x5)).
end_of_list.

% Reading from file D:\colore-testbed\ontologies\multidim_space_dim\conversions\dim_prime_linear.p9


formulas(sos).
(exists x2 mindim(x2)).
end_of_list.

% Reading from file D:\colore-testbed\ontologies\multidim_space_dim\definitions\conversions\min_max_dim.p9


formulas(sos).
(all x12 (maxdim(x12) <-> s(x12) & -zex(x12) & (all x11 (s(x11) -> leq(x11,x12))))).
(all x22 (mindim(x22) <-> s(x22) & -zex(x22) & (all x21 (s(x21) & -zex(x21) -> leq(x22,x21))))).
end_of_list.

% Reading from file D:\colore-testbed\ontologies\simple_features\sf_primitives\conversions\sf_point_codi.p9


formulas(sos).
(all x2 (sf_point(x2) -> point(x2))).
end_of_list.

% Reading from file D:\colore-testbed\ontologies\multidim_space_codi\conversions\codi_basic.p9


formulas(sos).
(all x12 all x11 (cont(x12,x11) -> leq(x12,x11))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 1000).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x12 all x11 (leq(x12,x11) -> s(x12))) # label(non_clause).  [assumption].
2 (all x22 all x21 (leq(x22,x21) -> s(x21))) # label(non_clause).  [assumption].
3 (all x31 (zex(x31) -> s(x31))) # label(non_clause).  [assumption].
4 (all x41 (s(x41) -> leq(x41,x41))) # label(non_clause).  [assumption].
5 (all x52 all x51 all x53 (leq(x52,x51) & leq(x51,x53) -> leq(x52,x53))) # label(non_clause).  [assumption].
6 (all x62 all x61 (zex(x62) & zex(x61) -> x62 = x61)) # label(non_clause).  [assumption].
7 (all x72 all x71 (zex(x72) & s(x71) -> leq(x72,x71))) # label(non_clause).  [assumption].
8 (all x11 (s(x11) & -zex(x11) <-> cont(x11,x11))) # label(non_clause).  [assumption].
9 (all x22 all x21 (cont(x22,x21) & cont(x21,x22) -> x22 = x21)) # label(non_clause).  [assumption].
10 (all x32 all x31 all x33 (cont(x32,x31) & cont(x31,x33) -> cont(x32,x33))) # label(non_clause).  [assumption].
11 (all x42 all x41 (zex(x42) -> s(x42) & -cont(x41,x42) & -cont(x42,x41))) # label(non_clause).  [assumption].
12 (all x52 all x51 (zex(x52) & zex(x51) -> x52 = x51)) # label(non_clause).  [assumption].
13 (all x12 (point(x12) <-> s(x12) & mindim(x12) & (all x11 (cont(x11,x12) -> x11 = x12)))) # label(non_clause).  [assumption].
14 (exists x2 sf_point(x2)) # label(non_clause).  [assumption].
15 (exists x3 -sf_point(x3)) # label(non_clause).  [assumption].
16 (exists x4 point(x4)) # label(non_clause).  [assumption].
17 (exists x5 -point(x5)) # label(non_clause).  [assumption].
18 (exists x2 mindim(x2)) # label(non_clause).  [assumption].
19 (all x12 (maxdim(x12) <-> s(x12) & -zex(x12) & (all x11 (s(x11) -> leq(x11,x12))))) # label(non_clause).  [assumption].
20 (all x22 (mindim(x22) <-> s(x22) & -zex(x22) & (all x21 (s(x21) & -zex(x21) -> leq(x22,x21))))) # label(non_clause).  [assumption].
21 (all x2 (sf_point(x2) -> point(x2))) # label(non_clause).  [assumption].
22 (all x12 all x11 (cont(x12,x11) -> leq(x12,x11))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-leq(x,y) | s(x).  [clausify(1)].
-leq(x,y) | s(y).  [clausify(2)].
-zex(x) | s(x).  [clausify(3)].
-s(x) | leq(x,x).  [clausify(4)].
-leq(x,y) | -leq(y,z) | leq(x,z).  [clausify(5)].
-zex(x) | -zex(y) | y = x.  [clausify(6)].
-zex(x) | -s(y) | leq(x,y).  [clausify(7)].
-s(x) | zex(x) | cont(x,x).  [clausify(8)].
s(x) | -cont(x,x).  [clausify(8)].
-zex(x) | -cont(x,x).  [clausify(8)].
-cont(x,y) | -cont(y,x) | y = x.  [clausify(9)].
-cont(x,y) | -cont(y,z) | cont(x,z).  [clausify(10)].
-zex(x) | s(x).  [clausify(11)].
-zex(x) | -cont(y,x).  [clausify(11)].
-zex(x) | -cont(x,y).  [clausify(11)].
-zex(x) | -zex(y) | y = x.  [clausify(12)].
-point(x) | s(x).  [clausify(13)].
-point(x) | mindim(x).  [clausify(13)].
-point(x) | -cont(y,x) | y = x.  [clausify(13)].
point(x) | -s(x) | -mindim(x) | cont(f1(x),x).  [clausify(13)].
point(x) | -s(x) | -mindim(x) | f1(x) != x.  [clausify(13)].
sf_point(c1).  [clausify(14)].
-sf_point(c2).  [clausify(15)].
point(c3).  [clausify(16)].
-point(c4).  [clausify(17)].
mindim(c5).  [clausify(18)].
-maxdim(x) | s(x).  [clausify(19)].
-maxdim(x) | -zex(x).  [clausify(19)].
-maxdim(x) | -s(y) | leq(y,x).  [clausify(19)].
maxdim(x) | -s(x) | zex(x) | s(f2(x)).  [clausify(19)].
maxdim(x) | -s(x) | zex(x) | -leq(f2(x),x).  [clausify(19)].
-mindim(x) | s(x).  [clausify(20)].
-mindim(x) | -zex(x).  [clausify(20)].
-mindim(x) | -s(y) | zex(y) | leq(x,y).  [clausify(20)].
mindim(x) | -s(x) | zex(x) | s(f3(x)).  [clausify(20)].
mindim(x) | -s(x) | zex(x) | -zex(f3(x)).  [clausify(20)].
mindim(x) | -s(x) | zex(x) | -leq(x,f3(x)).  [clausify(20)].
-sf_point(x) | point(x).  [clausify(21)].
-cont(x,y) | leq(x,y).  [clausify(22)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating mindim/1
23 point(x) | -s(x) | -mindim(x) | cont(f1(x),x).  [clausify(13)].
24 -point(x) | mindim(x).  [clausify(13)].
25 point(x) | -s(x) | -mindim(x) | f1(x) != x.  [clausify(13)].
26 mindim(c5).  [clausify(18)].
Derived: point(c5) | -s(c5) | cont(f1(c5),c5).  [resolve(26,a,23,c)].
Derived: point(c5) | -s(c5) | f1(c5) != c5.  [resolve(26,a,25,c)].
27 -mindim(x) | s(x).  [clausify(20)].
Derived: s(x) | -point(x).  [resolve(27,a,24,b)].
Derived: s(c5).  [resolve(27,a,26,a)].
28 -mindim(x) | -zex(x).  [clausify(20)].
Derived: -zex(x) | -point(x).  [resolve(28,a,24,b)].
Derived: -zex(c5).  [resolve(28,a,26,a)].
29 -mindim(x) | -s(y) | zex(y) | leq(x,y).  [clausify(20)].
Derived: -s(x) | zex(x) | leq(y,x) | -point(y).  [resolve(29,a,24,b)].
Derived: -s(x) | zex(x) | leq(c5,x).  [resolve(29,a,26,a)].
30 mindim(x) | -s(x) | zex(x) | s(f3(x)).  [clausify(20)].
Derived: -s(x) | zex(x) | s(f3(x)) | point(x) | -s(x) | cont(f1(x),x).  [resolve(30,a,23,c)].
Derived: -s(x) | zex(x) | s(f3(x)) | point(x) | -s(x) | f1(x) != x.  [resolve(30,a,25,c)].
Derived: -s(x) | zex(x) | s(f3(x)) | -s(y) | zex(y) | leq(x,y).  [resolve(30,a,29,a)].
31 mindim(x) | -s(x) | zex(x) | -zex(f3(x)).  [clausify(20)].
Derived: -s(x) | zex(x) | -zex(f3(x)) | point(x) | -s(x) | cont(f1(x),x).  [resolve(31,a,23,c)].
Derived: -s(x) | zex(x) | -zex(f3(x)) | point(x) | -s(x) | f1(x) != x.  [resolve(31,a,25,c)].
Derived: -s(x) | zex(x) | -zex(f3(x)) | -s(y) | zex(y) | leq(x,y).  [resolve(31,a,29,a)].
32 mindim(x) | -s(x) | zex(x) | -leq(x,f3(x)).  [clausify(20)].
Derived: -s(x) | zex(x) | -leq(x,f3(x)) | point(x) | -s(x) | cont(f1(x),x).  [resolve(32,a,23,c)].
Derived: -s(x) | zex(x) | -leq(x,f3(x)) | point(x) | -s(x) | f1(x) != x.  [resolve(32,a,25,c)].
Derived: -s(x) | zex(x) | -leq(x,f3(x)) | -s(y) | zex(y) | leq(x,y).  [resolve(32,a,29,a)].

Eliminating maxdim/1
33 maxdim(x) | -s(x) | zex(x) | s(f2(x)).  [clausify(19)].
34 -maxdim(x) | s(x).  [clausify(19)].
35 -maxdim(x) | -zex(x).  [clausify(19)].
36 -maxdim(x) | -s(y) | leq(y,x).  [clausify(19)].
Derived: -s(x) | zex(x) | s(f2(x)) | -s(y) | leq(y,x).  [resolve(33,a,36,a)].
37 maxdim(x) | -s(x) | zex(x) | -leq(f2(x),x).  [clausify(19)].
Derived: -s(x) | zex(x) | -leq(f2(x),x) | -s(y) | leq(y,x).  [resolve(37,a,36,a)].

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, s, zex, point, sf_point, leq, cont ]).
Function symbol precedence:  function_order([ c1, c2, c3, c4, c5, f1, f2, f3 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
    % set(paramodulation) -> set(back_demod).
  % set(binary_resolution).  % (non-Horn)
  % set(positive_inference). % (non-Horn)
    % set(positive_inference) -> assign(literal_selection, max_negative).
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(back_unit_deletion).  % (non-Horn)
    % set(back_unit_deletion) -> set(unit_deletion).

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

% Clauses after input processing:

formulas(usable).
end_of_list.

formulas(sos).
38 -leq(x,y) | s(x).  [clausify(1)].
39 -leq(x,y) | s(y).  [clausify(2)].
40 -zex(x) | s(x).  [clausify(3)].
41 -s(x) | leq(x,x).  [clausify(4)].
42 -leq(x,y) | -leq(y,z) | leq(x,z).  [clausify(5)].
43 -zex(x) | -zex(y) | y = x.  [clausify(6)].
44 -zex(x) | -s(y) | leq(x,y).  [clausify(7)].
45 -s(x) | zex(x) | cont(x,x).  [clausify(8)].
46 s(x) | -cont(x,x).  [clausify(8)].
48 -cont(x,y) | -cont(y,x) | y = x.  [clausify(9)].
49 -cont(x,y) | -cont(y,z) | cont(x,z).  [clausify(10)].
50 -zex(x) | -cont(y,x).  [clausify(11)].
51 -zex(x) | -cont(x,y).  [clausify(11)].
52 -point(x) | s(x).  [clausify(13)].
53 -point(x) | -cont(y,x) | y = x.  [clausify(13)].
54 sf_point(c1).  [clausify(14)].
55 -sf_point(c2).  [clausify(15)].
56 point(c3).  [clausify(16)].
57 -point(c4).  [clausify(17)].
58 -sf_point(x) | point(x).  [clausify(21)].
59 -cont(x,y) | leq(x,y).  [clausify(22)].
62 s(c5).  [resolve(27,a,26,a)].
63 -zex(x) | -point(x).  [resolve(28,a,24,b)].
64 -zex(c5).  [resolve(28,a,26,a)].
65 -s(x) | zex(x) | leq(y,x) | -point(y).  [resolve(29,a,24,b)].
66 -s(x) | zex(x) | leq(c5,x).  [resolve(29,a,26,a)].
68 -s(x) | zex(x) | s(f3(x)) | point(x) | cont(f1(x),x).  [copy(67),merge(e)].
70 -s(x) | zex(x) | s(f3(x)) | point(x) | f1(x) != x.  [copy(69),merge(e)].
71 -s(x) | zex(x) | s(f3(x)) | -s(y) | zex(y) | leq(x,y).  [resolve(30,a,29,a)].
73 -s(x) | zex(x) | -zex(f3(x)) | point(x) | cont(f1(x),x).  [copy(72),merge(e)].
75 -s(x) | zex(x) | -zex(f3(x)) | point(x) | f1(x) != x.  [copy(74),merge(e)].
76 -s(x) | zex(x) | -zex(f3(x)) | -s(y) | zex(y) | leq(x,y).  [resolve(31,a,29,a)].
78 -s(x) | zex(x) | -leq(x,f3(x)) | point(x) | cont(f1(x),x).  [copy(77),merge(e)].
80 -s(x) | zex(x) | -leq(x,f3(x)) | point(x) | f1(x) != x.  [copy(79),merge(e)].
81 -s(x) | zex(x) | -leq(x,f3(x)) | -s(y) | zex(y) | leq(x,y).  [resolve(32,a,29,a)].
82 -s(x) | zex(x) | s(f2(x)) | -s(y) | leq(y,x).  [resolve(33,a,36,a)].
83 -s(x) | zex(x) | -leq(f2(x),x) | -s(y) | leq(y,x).  [resolve(37,a,36,a)].
84 point(c5) | f1(c5) != c5.  [back_unit_del(61),unit_del(b,62)].
85 point(c5) | cont(f1(c5),c5).  [back_unit_del(60),unit_del(b,62)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.03 seconds.

given #1 (I,wt=5): 38 -leq(x,y) | s(x).  [clausify(1)].

given #2 (I,wt=5): 39 -leq(x,y) | s(y).  [clausify(2)].

given #3 (I,wt=4): 40 -zex(x) | s(x).  [clausify(3)].

given #4 (I,wt=5): 41 -s(x) | leq(x,x).  [clausify(4)].

given #5 (I,wt=9): 42 -leq(x,y) | -leq(y,z) | leq(x,z).  [clausify(5)].

given #6 (I,wt=7): 43 -zex(x) | -zex(y) | y = x.  [clausify(6)].

given #7 (I,wt=7): 44 -zex(x) | -s(y) | leq(x,y).  [clausify(7)].

given #8 (I,wt=7): 45 -s(x) | zex(x) | cont(x,x).  [clausify(8)].

given #9 (I,wt=5): 46 s(x) | -cont(x,x).  [clausify(8)].

given #10 (I,wt=9): 48 -cont(x,y) | -cont(y,x) | y = x.  [clausify(9)].

given #11 (I,wt=9): 49 -cont(x,y) | -cont(y,z) | cont(x,z).  [clausify(10)].

given #12 (I,wt=5): 50 -zex(x) | -cont(y,x).  [clausify(11)].

given #13 (I,wt=5): 51 -zex(x) | -cont(x,y).  [clausify(11)].

given #14 (I,wt=4): 52 -point(x) | s(x).  [clausify(13)].

given #15 (I,wt=8): 53 -point(x) | -cont(y,x) | y = x.  [clausify(13)].

given #16 (I,wt=2): 54 sf_point(c1).  [clausify(14)].

given #17 (I,wt=2): 55 -sf_point(c2).  [clausify(15)].

given #18 (I,wt=2): 56 point(c3).  [clausify(16)].

given #19 (I,wt=2): 57 -point(c4).  [clausify(17)].

given #20 (I,wt=4): 58 -sf_point(x) | point(x).  [clausify(21)].

given #21 (I,wt=6): 59 -cont(x,y) | leq(x,y).  [clausify(22)].

given #22 (I,wt=2): 62 s(c5).  [resolve(27,a,26,a)].

given #23 (I,wt=4): 63 -zex(x) | -point(x).  [resolve(28,a,24,b)].

given #24 (I,wt=2): 64 -zex(c5).  [resolve(28,a,26,a)].

given #25 (I,wt=9): 65 -s(x) | zex(x) | leq(y,x) | -point(y).  [resolve(29,a,24,b)].

given #26 (I,wt=7): 66 -s(x) | zex(x) | leq(c5,x).  [resolve(29,a,26,a)].

given #27 (I,wt=13): 68 -s(x) | zex(x) | s(f3(x)) | point(x) | cont(f1(x),x).  [copy(67),merge(e)].

given #28 (I,wt=13): 70 -s(x) | zex(x) | s(f3(x)) | point(x) | f1(x) != x.  [copy(69),merge(e)].

given #29 (I,wt=14): 71 -s(x) | zex(x) | s(f3(x)) | -s(y) | zex(y) | leq(x,y).  [resolve(30,a,29,a)].

given #30 (I,wt=13): 73 -s(x) | zex(x) | -zex(f3(x)) | point(x) | cont(f1(x),x).  [copy(72),merge(e)].

given #31 (I,wt=13): 75 -s(x) | zex(x) | -zex(f3(x)) | point(x) | f1(x) != x.  [copy(74),merge(e)].

given #32 (I,wt=14): 76 -s(x) | zex(x) | -zex(f3(x)) | -s(y) | zex(y) | leq(x,y).  [resolve(31,a,29,a)].

given #33 (I,wt=14): 78 -s(x) | zex(x) | -leq(x,f3(x)) | point(x) | cont(f1(x),x).  [copy(77),merge(e)].

given #34 (I,wt=14): 80 -s(x) | zex(x) | -leq(x,f3(x)) | point(x) | f1(x) != x.  [copy(79),merge(e)].

given #35 (I,wt=15): 81 -s(x) | zex(x) | -leq(x,f3(x)) | -s(y) | zex(y) | leq(x,y).  [resolve(32,a,29,a)].

given #36 (I,wt=12): 82 -s(x) | zex(x) | s(f2(x)) | -s(y) | leq(y,x).  [resolve(33,a,36,a)].

given #37 (I,wt=13): 83 -s(x) | zex(x) | -leq(f2(x),x) | -s(y) | leq(y,x).  [resolve(37,a,36,a)].

given #38 (I,wt=6): 84 point(c5) | f1(c5) != c5.  [back_unit_del(61),unit_del(b,62)].

given #39 (I,wt=6): 85 point(c5) | cont(f1(c5),c5).  [back_unit_del(60),unit_del(b,62)].

given #40 (A,wt=2): 86 s(c3).  [resolve(56,a,52,a)].

given #41 (F,wt=2): 88 -sf_point(c4).  [ur(58,b,57,a)].

given #42 (F,wt=2): 91 -zex(c3).  [resolve(63,b,56,a)].

given #43 (T,wt=2): 87 point(c1).  [resolve(58,a,54,a)].

given #44 (T,wt=2): 107 s(c1).  [resolve(87,a,52,a)].

given #45 (T,wt=3): 89 cont(c5,c5).  [resolve(62,a,45,a),unit_del(a,64)].

given #46 (T,wt=3): 90 leq(c5,c5).  [resolve(62,a,41,a)].

given #47 (A,wt=7): 92 -s(x) | zex(x) | leq(c3,x).  [resolve(65,d,56,a)].

given #48 (F,wt=2): 106 -zex(c1).  [resolve(87,a,63,b)].

given #49 (T,wt=3): 102 leq(c5,c3).  [resolve(86,a,66,a),unit_del(a,91)].

given #50 (T,wt=3): 103 cont(c3,c3).  [resolve(86,a,45,a),unit_del(a,91)].

given #51 (T,wt=3): 104 leq(c3,c3).  [resolve(86,a,41,a)].

given #52 (T,wt=3): 110 leq(c5,c1).  [resolve(107,a,66,a),unit_del(a,106)].

given #53 (A,wt=10): 93 -s(x) | zex(x) | s(f3(x)) | leq(x,c5).  [resolve(71,d,62,a),unit_del(d,64)].

given #54 (T,wt=3): 111 cont(c1,c1).  [resolve(107,a,45,a),unit_del(a,106)].

given #55 (T,wt=3): 112 leq(c1,c1).  [resolve(107,a,41,a)].

given #56 (T,wt=3): 113 leq(c3,c1).  [resolve(92,a,107,a),unit_del(a,106)].

given #57 (T,wt=3): 114 leq(c3,c5).  [resolve(92,a,62,a),unit_del(a,64)].

given #58 (A,wt=8): 94 s(f2(c5)) | -s(x) | leq(x,c5).  [resolve(82,a,62,a),unit_del(a,64)].

given #59 (T,wt=5): 96 point(c5) | -zex(f1(c5)).  [resolve(85,b,51,b)].

given #60 (T,wt=6): 95 point(c5) | leq(f1(c5),c5).  [resolve(85,b,59,a)].

given #61 (T,wt=5): 127 point(c5) | s(f1(c5)).  [resolve(95,b,38,a)].

given #62 (T,wt=6): 115 -leq(x,c5) | leq(x,c3).  [resolve(102,a,42,b)].

given #63 (A,wt=9): 97 point(c5) | -cont(x,f1(c5)) | cont(x,c5).  [resolve(85,b,49,b)].

given #64 (T,wt=6): 116 -leq(c3,x) | leq(c5,x).  [resolve(102,a,42,a)].

given #65 (T,wt=6): 117 -leq(x,c5) | leq(x,c1).  [resolve(110,a,42,b)].

given #66 (T,wt=6): 118 -leq(c1,x) | leq(c5,x).  [resolve(110,a,42,a)].

given #67 (T,wt=6): 119 s(f3(c1)) | leq(c1,c5).  [resolve(93,a,107,a),unit_del(a,106)].

given #68 (A,wt=9): 98 point(c5) | -cont(c5,x) | cont(f1(c5),x).  [resolve(85,b,49,a)].

given #69 (T,wt=6): 120 -leq(x,c3) | leq(x,c1).  [resolve(113,a,42,b)].

given #70 (T,wt=6): 121 -leq(c1,x) | leq(c3,x).  [resolve(113,a,42,a)].

given #71 (T,wt=6): 122 -leq(x,c3) | leq(x,c5).  [resolve(114,a,42,b)].

given #72 (T,wt=6): 123 -leq(c5,x) | leq(c3,x).  [resolve(114,a,42,a)].

given #73 (A,wt=10): 99 point(c5) | -cont(c5,f1(c5)) | f1(c5) = c5.  [resolve(85,b,48,b)].

given #74 (T,wt=6): 124 s(f2(c5)) | leq(c1,c5).  [resolve(94,b,107,a)].

given #75 (T,wt=6): 128 leq(f1(c5),c3) | point(c5).  [resolve(115,a,95,b)].

given #76 (T,wt=6): 129 leq(f1(c5),c1) | point(c5).  [resolve(117,a,95,b)].

given #77 (T,wt=6): 130 s(f3(c1)) | leq(c1,c3).  [resolve(119,b,115,a)].

given #78 (A,wt=8): 100 s(f2(c3)) | -s(x) | leq(x,c3).  [resolve(86,a,82,a),unit_del(a,91)].

given #79 (T,wt=6): 133 s(f2(c5)) | leq(c1,c3).  [resolve(124,b,115,a)].

given #80 (T,wt=6): 142 s(f2(c3)) | leq(c1,c3).  [resolve(100,b,107,a)].

given #81 (T,wt=6): 145 s(f2(c3)) | leq(c1,c5).  [resolve(142,b,122,a)].

given #82 (T,wt=7): 105 -s(x) | zex(x) | leq(c1,x).  [resolve(87,a,65,d)].

given #83 (A,wt=10): 101 -s(x) | zex(x) | s(f3(x)) | leq(x,c3).  [resolve(86,a,71,d),unit_del(d,91)].

given #84 (T,wt=3): 150 leq(c1,c3).  [resolve(105,a,86,a),unit_del(a,91)].

given #85 (T,wt=3): 151 leq(c1,c5).  [resolve(105,a,62,a),unit_del(a,64)].

given #86 (T,wt=6): 152 -leq(x,c1) | leq(x,c3).  [resolve(150,a,42,b)].

given #87 (T,wt=6): 153 -leq(c3,x) | leq(c1,x).  [resolve(150,a,42,a)].

given #88 (A,wt=8): 108 s(f2(c1)) | -s(x) | leq(x,c1).  [resolve(107,a,82,a),unit_del(a,106)].

given #89 (T,wt=6): 154 -leq(x,c1) | leq(x,c5).  [resolve(151,a,42,b)].

given #90 (T,wt=6): 155 -leq(c5,x) | leq(c1,x).  [resolve(151,a,42,a)].

given #91 (T,wt=9): 125 point(c5) | -leq(x,f1(c5)) | leq(x,c5).  [resolve(95,b,42,b)].

given #92 (T,wt=9): 126 point(c5) | -leq(c5,x) | leq(f1(c5),x).  [resolve(95,b,42,a)].

given #93 (A,wt=10): 109 -s(x) | zex(x) | s(f3(x)) | leq(x,c1).  [resolve(107,a,71,d),unit_del(d,106)].

given #94 (T,wt=9): 136 point(c5) | -leq(x,f1(c5)) | leq(x,c3).  [resolve(128,a,42,b)].

given #95 (T,wt=9): 137 point(c5) | -leq(c3,x) | leq(f1(c5),x).  [resolve(128,a,42,a)].

given #96 (T,wt=9): 138 point(c5) | -leq(x,f1(c5)) | leq(x,c1).  [resolve(129,a,42,b)].

given #97 (T,wt=9): 139 point(c5) | -leq(c1,x) | leq(f1(c5),x).  [resolve(129,a,42,a)].

============================== STATISTICS ============================

Given=97. Generated=310. Kept=112. proofs=0.
Usable=91. Sos=0. Demods=0. Limbo=0, Disabled=79. Hints=0.
Weight_deleted=0. Literals_deleted=0.
Forward_subsumed=198. Back_subsumed=19.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=2.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=128. Nonunit_bsub_feature_tests=146.
Megabytes=0.13.
User_CPU=0.05, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

SEARCH FAILED

SEARCH FAILED

Exiting with failure.

------ process 12764 exit (sos_empty) ------

Process 12764 exit (sos_empty) Thu Nov  1 08:59:57 2018
============================= D:\Shirly\Reasoning\prover9-bin\prover9 ================================
execution finished: Thu Nov 01 08:59:58 2018
total CPU time used: 0
The command was "D:\Shirly\Reasoning\prover9-bin\prover9 -t1000 -f D:\colore-testbed\ontologies\multidim_space_dim\conversions\dim_prime_linear_unbounded.p9 D:\colore-testbed\ontologies\multidim_space_cont\conversions\cont_basic.p9 D:\colore-testbed\ontologies\multidim_space_codi\definitions\conversions\point.p9 D:\colore-testbed\ontologies\simple_features\sf_primitives\consistency\conversions\sf_point_codi_nontrivial.p9 D:\colore-testbed\ontologies\multidim_space_dim\conversions\dim_prime_linear.p9 D:\colore-testbed\ontologies\multidim_space_dim\definitions\conversions\min_max_dim.p9 D:\colore-testbed\ontologies\simple_features\sf_primitives\conversions\sf_point_codi.p9 D:\colore-testbed\ontologies\multidim_space_codi\conversions\codi_basic.p9"
Input read from 
============================ end of footer ===========================
