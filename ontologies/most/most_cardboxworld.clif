/*******************************************************************************
* Copyright (c) University of Toronto and others. All rights reserved.
* The content of this file is licensed under the Creative Commons Attribution-
* ShareAlike 3.0 Unported license. The legal text of this license can be
* found at http://creativecommons.org/licenses/by-sa/3.0/legalcode.
*
* Contributors:
* Carmen Chui, Michael Gruninger
*******************************************************************************/

(cl-text http://colore.oor.net/most/most_fusion.clif

(cl-comment 'Theory containing definitions for the types of polycyclic groups of molecules.')

(cl-imports test/most_root)
(cl-imports http://colore.oor.net/most/most_root.clif)
(cl-comment 'This theory imports most_root.')

(cl-comment 'A polycyclic molecule is one where all functional groups are cyclic groups.')
(forall (m)
	(iff (polycyclic m)
		(and (molecule m)
			(forall (g)
				(if (containsGroup g m)
					(ring g))))))

(cl-comment '==================================')
(cl-comment 'FUSION')
(cl-comment 'Fusion Group')
(cl-comment 'Overlapping cycles (bonds are shared)')
(cl-comment '==================================')

(cl-comment '==================================')
(cl-comment 'From http://colore.oor.net/boxworld/boxworld_edge.clif')
(cl-comment '==================================')

(cl-comment 'An edge is part of at most two surfaces.')
(forall (e s1 s2 s3)
        (if     (and    (edge e) (surface s1) (surface s2) (surface s3)
                        (part e s1) (part e s2) (part e s3))
                (or     (= s1 s2) (= s2 s3) (= s1 s3))))

(cl-comment 'A surface that is part of a box containing other surfaces also contains a ridge.')
(forall (x s1 s2)
        (if     (and    (box x) (surface s1) (surface s2) (not (= s1 s2))
                        (part s1 x) (part s2 x))
                (exists (e)
                        (and    (ridge e) (part e s1)))))


(cl-comment 'Every edge in a surface meets another distinct edge in that surface.')
(forall (e1 s v)
        (if     (and    (edge e1) (part e1 s) (surface s))
                (exists (e2 p)
                        (and    (part e2 s) (meet e1 e2 p)))))
)

(cl-comment 'Every border edge meets two distinct border edges.')
(forall (e1)
        (if     (border e1)
                (exists (e2 e3 v1 v2)
                        (and    (border e2) (border e3) (not (= e2 e3))
                                (meet e1 e2 v1) (meet e1 e3 v2)))))

(cl-comment 'A ridge is an edge that is part of two surfaces.')
(forall (e)
        (iff    (ridge e)
                (exists (s1 s2)
                        (and    (edge e) (surface s1) (surface s2) (not (= s1 s2))
                                (part e s1) (part e s2)))))

(cl-comment 'A border is an edge that is part of a unique surface.')
(forall (e)
        (iff    (border e)
                (and    (edge e) (not (ridge e)))))

(cl-comment '==================================')
(cl-comment 'From http://colore.oor.net/boxworld/boxworld_part.clif')
(cl-comment '==================================')

(forall (x)
        (if     (or (point x) (edge x) (surface x))
                (not (box x))))

(forall (x y)
        (if     (and    (part x y) (box x) (box y))
                (= x y)))

(cl-comment '==================================')
(cl-imports http://colore.oor.net/boxworld/cardworld_edge.clif)
(cl-comment '==================================')

(cl-comment 'Each point is part of some edge')
(forall (p)
        (if     (point p)
                (exists (e)
                        (and    (edge e) (part p e)))))

(cl-comment 'Every edge contains at least two vertices.')
(forall (e1)
        (if     (edge e1)
                (exists (e2 e3 v1 v2)
                        (and    (meet e1 e2 v1) (meet e1 e3 v2)
                                (not (= e1 e2)) (not (= v1 v2))))))

(cl-comment 'An edge contains at most two vertices.')
(forall (e v1 v2 v3)
        (if     (and    (edge e) (vertex v1) (vertex v2) (vertex v3)
                        (part v1 e) (part v2 e) (part v3 e))
                (or     (= v1 v2) (= v1 v3) (= v2 v3))))

(cl-comment 'Each edge is part of some surface.')
(forall (e)
        (if     (edge e)
                (exists (s)
                        (and    (surface s) (part e s)))))

(cl-comment 'Each surface contains an edge.')
(forall (s)
        (if     (surface s)
                (exists (e)
                        (and    (edge e) (part e s)))))

(forall (e1 e2 v)
        (iff    (meet e1 e2 v)
                (and    (edge e1) (edge e2) (point v) (not (= e1 e2))
                        (part v e1) (part v e2))))

(forall (v)
        (iff    (vertex v)
                (exists (e1 e2)
                        (meet e1 e2 v))))

(cl-comment '==================================')
(cl-imports http://colore.oor.net/cardworld/cardworld_part.clif)
(cl-comment '==================================')

(forall (x)
        (if     (point x) (and (not (edge x)) (not (surface x)))))

(forall (x)
        (if     (edge x) (not (surface x))))

(forall (x y)
        (if     (part x y) (part y x)))

(forall (x y)
        (part x x))

(forall (x y)
        (if     (and    (part x y) (point x) (point y))
                (= x y)))

(forall (x y)
        (if     (and    (part x y) (edge x) (edge y))
                (= x y)))

(forall (x y)
        (if     (and    (part x y) (surface x) (surface y))
                (= x y)))
			
)